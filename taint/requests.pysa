# SSRF [requests.api]
def requests.api.request(
        method: TaintSink[RequestSend],
        url: TaintSink[RequestSend],
        **kwargs: TaintSink[RequestSend, Via[requests_metadata,code_smell]]
): ...
def requests.api.get(url: TaintSink[RequestSend],
        params: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
        **kwargs: TaintSink[RequestSend, Via[requests_metadata,code_smell]]
): ...
def requests.api.options(url: TaintSink[RequestSend], **kwargs: TaintSink[RequestSend, Via[requests_metadata,code_smell]]): ...
def requests.api.head(url: TaintSink[RequestSend], **kwargs: TaintSink[RequestSend, Via[requests_metadata,code_smell]]): ...
def requests.api.post(
        url: TaintSink[RequestSend],
        data: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
        json: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
        **kwargs: TaintSink[RequestSend, Via[requests_metadata,code_smell]]
): ...
def requests.api.put(
        url: TaintSink[RequestSend],
        data: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
        json: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
        **kwargs: TaintSink[RequestSend, Via[requests_metadata,code_smell]]
): ...
def requests.api.patch(
        url: TaintSink[RequestSend],
        data: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
        json: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
        **kwargs: TaintSink[RequestSend, Via[requests_metadata,code_smell]]
): ...
def requests.api.delete(
        url: TaintSink[RequestSend],
        **kwargs: TaintSink[RequestSend, Via[requests_metadata,code_smell]]
): ...

# SSRF [requests.Session]
def requests.sessions.Session.get(
        self, url: TaintSink[RequestSend],
        **kwargs: TaintSink[RequestSend,
        Via[requests_metadata,code_smell]]
): ...
def requests.sessions.Session.options(
        self,
        url: TaintSink[RequestSend],
        **kwargs: TaintSink[RequestSend, Via[requests_metadata,code_smell]]
): ...
def requests.sessions.Session.head(
        self, url: TaintSink[RequestSend],
        **kwargs: TaintSink[RequestSend, Via[requests_metadata,code_smell]]
): ...
def requests.sessions.Session.post(
        self,
        url: TaintSink[RequestSend],
        data: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
        json: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
        **kwargs: TaintSink[RequestSend, Via[requests_metadata,code_smell]]
): ...
def requests.sessions.Session.put(
        self,
        url: TaintSink[RequestSend],
        data: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
        **kwargs: TaintSink[RequestSend, Via[requests_metadata,code_smell]]
): ...
def requests.sessions.Session.patch(
        self,
        url: TaintSink[RequestSend],
        data: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
        **kwargs: TaintSink[RequestSend, Via[requests_metadata,code_smell]]
): ...
def requests.sessions.Session.delete(
        self,
        url: TaintSink[RequestSend],
        **kwargs: TaintSink[RequestSend, Via[requests_metadata,code_smell]]
): ...
def requests.sessions.Session.request(
        self, method: TaintSink[RequestSend],
        url: TaintSink[RequestSend],
            params: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
            data: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
            headers: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
            cookies: TaintSink[RequestSend] = ...,
            files = ...,
            auth: TaintSink[RequestSend] = ...,
            timeout: TaintSink[RequestSend] = ...,
            allow_redirects = ...,
            proxies: TaintSink[RequestSend] = ...,
            hooks: TaintSink[RequestSend] = ...,
            stream: TaintSink[RequestSend] = ...,
            verify: TaintSink[RequestSend] = ...,
            cert = ...,
            json: TaintSink[RequestSend, Via[requests_metadata,code_smell]] = ...,
): ...

# SSRF [urllib.request]
def urllib.request.urlopen(url: TaintSink[RequestSend], data = ...,
                           timeout = ..., *, cafile = ..., capath = ...,
                           cadefault = ..., context = ...): ...
def urllib.request.urlretrieve(url: TaintSink[RequestSend], filename=..., reporthook=..., data=...): ...
def urllib.request.URLopener.open(self, fullurl: TaintSink[RequestSend], data=...): ...
def urllib.request.URLopener.open_unknown(self, fullurl: TaintSink[RequestSend], data: TaintSink[RequestSend, Via[requests_metadata,code_smell]]=...): ...
def urllib.request.URLopener.retrieve(self, url: TaintSink[RequestSend], filename=..., reporthook=..., data=...): ...

# SSRF [http.client]
def http.client.HTTPConnection.__init__(self,
                                        host: TaintSink[RequestSend],
                                        port: TaintSink[RequestSend] = ...,
                                        timeout: TaintSink[RequestSend] = ...,
                                        source_address = ...,
                                        blocksize = ...
                                       ): ...
def http.client.HTTPSConnection.__init__(self,
                                         host: TaintSink[RequestSend],
                                         port: TaintSink[RequestSend] = ...,
                                         key_file: TaintSink[RequestSend] = ...,
                                         cert_file: TaintSink[RequestSend] = ...,
                                         timeout: TaintSink[RequestSend] = ...,
                                         source_address = ...,
                                         *,
                                         context = ...,
                                         check_hostname = ...
                                        ): ...
def http.client.HTTPConnection.request(self,
                                       method: TaintSink[RequestSend],
                                       url: TaintSink[RequestSend],
                                       body = ...,
                                       headers: TaintSink[RequestSend] = ...,
                                       *,
                                       encode_chunked = ...
                                      ): ...
def http.client.HTTPConnection.set_tunnel(self,
                                          host: TaintSink[RequestSend],
                                          port: TaintSink[RequestSend] = ...,
                                          headers: TaintSink[RequestSend] = ...
                                         ): ...
def http.client.HTTPConnection.putrequest(self,
                                          method: TaintSink[RequestSend],
                                          url: TaintSink[RequestSend],
                                          skip_host = ...,
                                          skip_accept_encoding = ...
                                         ): ...
def http.client.HTTPConnection.putheader(self,
                                         header: TaintSink[RequestSend],
                                         argument: TaintSink[RequestSend]
                                        ): ...

# socket
def socket.create_connection(address: TaintSink[RequestSend], timeout=..., source_address=...): ...
def socket.socket.connect(self, address: TaintSink[RequestSend]): ...
def socket.socket.connect_ex(self, address: TaintSink[RequestSend]): ...
def socket.socket.send(self, data: TaintSink[RequestSend], flags=...): ...
def socket.socket.sendall(self, data: TaintSink[RequestSend], flags=...): ...

# pycurl
def pycurl.Curl.setopt(self, option, value: TaintSink[RequestSend, ViaValueOf[option]]): ...
